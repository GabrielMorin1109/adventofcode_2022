Sc.tr <- S.pooled.f(.FtB = .FtB.train, .INDICES = .INDICES.train)
{
# `L_i(y)` prend comme paramètre y.bar, y.vec et S.y. J'effectue un
# apply sur les y.bar
a.lineaire <- apply(y.bar.tr[, -1], 1, `L_i(y)`,
y.vec = .FtB.valid, S.y = Sc.tr)
g.class.lineaire <- y.bar.tr[which.max(a.lineaire), 1]
# `D_i^2(y)` prend comme paramètre y.bar, y.vec et S.y. J'effectue un
# apply sur les y.bar
a.quadratique <- apply(y.bar.tr[, -1], 1, `D_i^2(y)`,
y.vec = .FtB.valid, S.y = Sc.tr)
g.class.quadratique <- y.bar.tr[which.min(a.quadratique), 1]
}
# Boolean s'il y a une erreure de classification
err.vec.lineaire[j] <- .INDICES.valid != g.class.lineaire
err.vec.quadratique[j] <- .INDICES.valid != g.class.quadratique
}
OUT <- list(
err.vec.lineaire.mean = mean(err.vec.lineaire),
err.vec.quadratique.mean = mean(err.vec.quadratique)
)
return(OUT)
}
err.func.valcroi(.FtB = FtB, .INDICES = rownames(FtB))
group.names <- unique(rownames(FtB))
k <- length(group.names)
Vh <- k - 1
Groups <- rownames(FtB)
manova.res <- manova(FtB ~ Groups)
manov.output <- summary(manova.res, test = "Wilks")
H <- manov.output$SS$Groups
E <- manov.output$SS$Residuals
Specdec<-eigen(solve(E)%*%H)
(a1 <- Specdec$vectors[,1])
which.max(abs(a1))
FtB2 <- FtB[rownames(FtB) != "1",]
colnames(FtB2) <- c("WDIM", "CIRCUM", "FBEYE", "EYEHD", "EARHD", "JAW")
FtB2.c <- scale(FtB2, center = TRUE, scale = FALSE)
S.y <- cov(FtB2.c)
SpecDec.S <- eigen(S.y)
rownames(SpecDec.S$vectors) <-
c("WDIM", "CIRCUM", "FBEYE", "EYEHD", "EARHD", "JAW")
eigenvalue.recursive.test <- function(data = FtB2, SpecDec = SpecDec.S, k = 1, alpha = 0.05){
# k : Nb de valeur propre égales à 0
n <- nrow(data) # Nb de données
p <- length(SpecDec$values) # Nb variables
v <- 0.5 * (k - 1) * (k + 2) # ddl
Lambdas <- SpecDec$values
Lambdas.subset <- Lambdas[(p - k + 1):p]
u <-
(n - (2 * p + 11) / 6) * (k * log(mean(Lambdas.subset)) -
sum(log(Lambdas.subset)))
# test de significativité
(test <- (u > qchisq(alpha, v, lower.tail = FALSE)))
if(isTRUE(test)){
# Si TRUE => les k plus petites valeurs propres ne sont pas "égaux" au seuil de 5%. La k^e valeur propre est donc "significativement influente". On concerve les p-(k-1) plus grandes valeurs propres.
OUT <-
list(
message = paste0("Keep the biggest ", p - (k - 1), " eigenvalue."),
Nb.eigenvalue = p - (k - 1)
)
return(OUT)
} else if(k>ncol(data)) {
stop("k is over the maximum possible eigenvector of the provided database.")
} else {
# Si FALSE => les k plus petites valeurs propres sont "égaux" au seuil de 5%
k <- k + 1 # next k
eigenvalue.recursive.test(data = data, SpecDec = SpecDec,  k = k, alpha = 0.05)
}
}
(eigenvalue.recursive.test.result <- eigenvalue.recursive.test(data = FtB2, SpecDec = SpecDec.S, k = 1, alpha = 0.05))
# Variance des variables
apply(FtB2, 2, var)
require(factoextra)
FtB2.pca <- stats::prcomp(FtB2, center = TRUE, scale = TRUE) # PCA on correlation matrix
factoextra::fviz_contrib(FtB2.pca, choice = "var", axes = 1, top = 10)
factoextra::fviz_contrib(FtB2.pca, choice = "var", axes = 2, top = 10)
Fish <- as.matrix(read.table(file = "T6_17.txt"))
rownames(Fish) <- Fish[,1]
Fish <- Fish[,-1]
colnames(Fish) <- c("aroma", "flavour", "texture", "humidity")
sub.class(.FtB = Fish, .INDICES = rownames(Fish))
err.func.valcroi(.FtB = Fish, .INDICES = rownames(Fish))
group.names <- unique(rownames(Fish))
k <- length(group.names)
Vh <- k - 1
Groups <- rownames(Fish)
manova.res <- manova(Fish ~ Groups)
manov.output <- summary(manova.res, test = "Wilks")
H <- manov.output$SS$Groups
E <- manov.output$SS$Residuals
Specdec <- eigen(solve(E) %*% H)
rownames(Specdec$vectors) <- colnames(Fish)
(a1 <- Specdec$vectors[,1])
which.max(abs(a1))
Fish.c <- scale(Fish, center = TRUE, scale = FALSE)
apply(Fish.c,2,var)
Fish.c <- scale(Fish, center = TRUE, scale = FALSE)
S.y <- cov(Fish.c) # equivalent à cov(Fish)
SpecDec.S <- eigen(S.y)
rownames(SpecDec.S$vectors) <- colnames(Fish)
SpecDec.S
Fish.R <- scale(Fish, center = TRUE, scale = TRUE)
R.y <- cor(Fish) # equivalent à cor(Fish.R) ou cov(Fish.R)
SpecDec.R <- eigen(R.y)
rownames(SpecDec.R$vectors) <- colnames(Fish)
SpecDec.R
eigenvalue.recursive.test(data = Fish, SpecDec = SpecDec.S)
eigenvalue.recursive.test(data = Fish, SpecDec = SpecDec.R)
cbind(
S = cumsum(Valprop.S$vp)/sum(Valprop.S$vp),
R = cumsum(Valprop.R$vp)/sum(Valprop.R$vp)
)
SpecDec.S$values
cbind(
S = cumsum(SpecDec.S$values)/sum(SpecDec.S$values),
R = cumsum(SpecDec.R$values)/sum(SpecDec.R$values)
)
# Valprop.S <- data.frame(num.vp=seq_along(SpecDec.S$values),vp=SpecDec.S$values)
# transform(Valprop.S, cumFreq = cumsum(vp), relative = cumsum(vp)/sum(vp))
#
# ggplot(Valprop.S, aes(x = num.vp,y = vp))+
#   geom_line()+geom_point()
# ```
# ```{r}
# Valprop.R <- data.frame(num.vp=seq_along(SpecDec.R$values),vp=SpecDec.R$values)
# transform(Valprop.R, cumFreq = cumsum(vp), relative = cumsum(vp)/sum(vp))
#
# ggplot(Valprop.R, aes(x = num.vp,y = vp))+
#   geom_line()+geom_point()
SpecDec.S$values
SpecDec.S$values
SpecDec.R$values
require(factoextra)
Fish.pca.S <- prcomp(Fish, center = TRUE, scale = FALSE) # PCA on covariance matrix
factoextra::fviz_contrib(Fish.pca.R, choice = "var", axes = 1, top = 10)
Fish.pca.R
Fish.pca.S <- prcomp(Fish, center = TRUE, scale = FALSE) # PCA on covariance matrix
Fish.pca.S
Fish.pca.S <- prcomp(Fish, center = TRUE, scale = FALSE) # PCA on covariance matrix
factoextra::fviz_contrib(Fish.pca.R, choice = "var", axes = 1, top = 10)
factoextra::fviz_contrib(Fish.pca.S, choice = "var", axes = 1, top = 10)
factoextra::fviz_pca_ind(Fish.pca.R)
factoextra::fviz_pca_ind(Fish.pca.S)
Grps <- as.factor(rownames(Fish))
factoextra::fviz_pca_ind(Fish.pca.S, label="none", habillage=Grps, addEllipses=TRUE, ellipse.level=0.95, palette = "Dark2")
Grps
factoextra::fviz_pca_ind(Fish.pca.S, label="none", habillage=Grps, addEllipses=TRUE, ellipse.level=0.95, palette = "Dark2")
Fish.pca.S
Fish.pca.S$rotation
Fish.pca.S$center
Fish.pca.S$scale
Fish.pca.S$x
Fish.pca.S
factoextra::fviz_pca_ind(Fish.pca.S)
factoextra::fviz_pca_ind(Fish.pca.S, label="none", habillage=Grps, #addEllipses=TRUE, ellipse.level=0.95, palette = "Dark2")
factoextra::fviz_pca_ind(Fish.pca.S, label="none", habillage=Grps,
#addEllipses=TRUE,
ellipse.level=0.95, palette = "Dark2")
factoextra::fviz_pca_ind(Fish.pca.S, label="none", habillage=Grps,
#addEllipses=TRUE,
ellipse.level=0.95, palette = "Dark2")
factoextra::fviz_pca_ind(Fish.pca.S)
rownames(Fish) <- NULL
Fish.pca.S <- prcomp(Fish, center = TRUE, scale = FALSE) # PCA on covariance matrix
Fish.pca.S
factoextra::fviz_pca_ind(Fish.pca.S)
factoextra::fviz_pca_ind(Fish.pca.S, label="none", habillage=Grps,
addEllipses=TRUE, ellipse.level=0.95, palette = "Dark2")
factoextra::fviz_pca_ind(Fish.pca.S)
factoextra::fviz_pca_biplot(Fish.pca.S)
factoextra::fviz_pca_biplot(Fish.pca.S)
factoextra::fviz_pca_ind(Fish.pca.S)
factoextra::fviz_pca_ind(Fish.pca.S, label="none", habillage=Grps,
addEllipses=TRUE, ellipse.level=0.95, palette = "Dark2")
FtB2
Grps <- as.factor(rownames(FtB2))
factoextra::fviz_pca_ind(FtB2.pca, label="none", habillage=Grps,
addEllipses=TRUE, ellipse.level=0.95, palette = "Dark2")
Grps <- as.factor(rownames(FtB2))
FtB2.pca <- stats::prcomp(FtB2, center = TRUE, scale = TRUE) # PCA on correlation matrix
rownames(FtB2) <- NULL
Grps <- Grps.FtB2
Grps.FtB2 <- Grps
Grps.FtB2 <- as.factor(rownames(FtB2))
rownames(FtB2) <- NULL
FtB2.pca <- stats::prcomp(FtB2, center = TRUE, scale = TRUE) # PCA on correlation matrix
factoextra::fviz_pca_ind(FtB2.pca, label="none", habillage=Grps,
addEllipses=TRUE, ellipse.level=0.95, palette = "Dark2")
factoextra::fviz_contrib(FtB2.pca, choice = "var", axes = 1, top = 10)
?NA
class(as.POSIXct(NA, format = "%d/%m/%Y"))
as.POSIXct(NA, format = "%d/%m/%Y")[1]
as.POSIXct(NA, format = "%d/%m/%Y") == NA_character_
identical(
NA_character_,
as.POSIXct(NA, format = "%d/%m/%Y")
)
identical(
NA_character_,
as.POSIXct(NA, format = "%d/%m/%Y")
)
identical(
NA_character_,
NA
)
NA_character_
identical(
NA_character_,
"NA"
)
#!/usr/bin/env Rscript
# path to wd
path.wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(path.wd)
read.table(file = "Data/input.txt")
tmp <- read.table(file = "Data/input.txt")
tmp[1]
?read.table
tmp <- read.table(file = "Data/input.txt")
tmp
tmp$V1
tmp$V1[1]
tmp <- read.table(file = "Data/input.txt")$V1
tmp
tmp <- read.table(file = "Data/input.txt",as.is	=TRUE)/$V1
tmp <- read.table(file = "Data/input.txt",as.is	=TRUE)/$V1
tmp <- read.table(file = "Data/input.txt",as.is	=TRUE)#$V1
tmp
tmp <- read.table(file = "Data/input.txt")$V1
tmp
gsub("([0-9]+).*$", "\\1",tmp)
sub("^.{2}", tmp)
gsub("^.{2}", tmp)
grepl("^.{2}", tmp)
grep("^.{2}", tmp)
grepRaw("^.{2}", tmp)
gsub("^.{2}","", tmp)
?substr
substr(1,3,tmp)
substr(tmp,1,3)
append(substr(tmp, 1, 3),substr(tmp, 4, 4))
paste(substr(tmp, 1, 3),substr(tmp, 4, 4))
paste0(substr(tmp, 1, 3),substr(tmp, 4, 4))
duplicated(chr_seq)
next_cht = substr(tmp, 4, 4)
chr_seq = paste0(chr_seq, next_cht)
chr_seq = substr(tmp, 1, 3)
chr_seq
chr_seq = paste0(chr_seq, next_cht)
duplicated(chr_seq)
chr_seq
rle(strsplit(chr_seq))
?strsplit
rle(base::strsplit(chr_seq))
rle(base::strsplit(chr_seq,""))
base::strsplit(chr_seq,"")[[1]]
base::strsplit(chr_seq,"")[[1]]|>
rle()
rle(base::strsplit(chr_seq,"")[[1]])
table(rle(base::strsplit(chr_seq,"")[[1]]))
?rle
table(base::strsplit(chr_seq,""))
sum(table(base::strsplit(chr_seq,"")))
table(base::strsplit(chr_seq,""))
unique(base::strsplit(chr_seq,""))
unique(base::strsplit(chr_seq,"")[[1]])
uniqueN
?uniqueN
View(uniqueN)
View(data.table::uniqueN)
duplicated(base::strsplit(chr_seq,"")[[1]])
duplicated(base::strsplit(chr_seq,"")[[1]])
any(duplicated(base::strsplit(chr_seq,"")[[1]]))
duplicated(base::strsplit(chr_seq,"")[[1]])
duplicated(base::strsplit(chr_seq,"")[[1]]
base::strsplit(chr_seq,"")[[1]]
base::strsplit(chr_seq,"")[[1]]
any(duplicated(base::strsplit(chr_seq,"")[[1]]))
nchar(tmp)
marker <- function(n){
chr_seq = substr(tmp, 1, n)
next_bool = TRUE
j <- n
while (condition) {
next_cht = substr(tmp, j, j)
j <- j + 1
chr_seq = paste0(chr_seq, next_cht)
next_bool = any(duplicated(base::strsplit(chr_seq,"")[[1]]))
if(j>=nchar(tmp)) break
return(j)
}
}
marker(4)
while (next_bool) {
next_cht = substr(tmp, j, j)
j <- j + 1
chr_seq = paste0(chr_seq, next_cht)
next_bool = any(duplicated(base::strsplit(chr_seq,"")[[1]]))
if(j>=nchar(tmp)) break
return(j)
}
marker <- function(n){
chr_seq = substr(tmp, 1, n)
next_bool = TRUE
j <- n
while (next_bool) {
next_cht = substr(tmp, j, j)
j <- j + 1
chr_seq = paste0(chr_seq, next_cht)
next_bool = any(duplicated(base::strsplit(chr_seq,"")[[1]]))
if(j>=nchar(tmp)) break
return(j)
}
}
marker(4)
marker <- function(n){
chr_seq = substr(tmp, 1, n)
next_bool = TRUE
j <- n
while (next_bool) {
next_cht = substr(tmp, j, j)
j <- j + 1
chr_seq = paste0(chr_seq, next_cht)
next_bool = !any(duplicated(base::strsplit(chr_seq,"")[[1]]))
if(j>=nchar(tmp)) break
return(j)
}
}
marker(4)
chr_seq
j
chr_seq = substr(tmp, 1, n)
next_bool = TRUE
n
n = 4
j <- n
marker <- function(n){
chr_seq = substr(tmp, 1, n)
next_bool = TRUE
j <- n
while (next_bool) {
j <- j + 1
next_cht = substr(tmp, j, j)
chr_seq = paste0(chr_seq, next_cht)
next_bool = !any(duplicated(base::strsplit(chr_seq,"")[[1]]))
if(j>=nchar(tmp)) break
return(j)
}
}
marker(4)
n
j <- n
next_cht = substr(tmp, j, j)
next_cht
paste0(chr_seq, next_cht)
j
marker <- function(n){
chr_seq = substr(tmp, 1, n)
next_bool = TRUE
j <- n
while (next_bool) {
cat(j, "\n")
next_cht = substr(tmp, j, j)
j <- j + 1
chr_seq = paste0(chr_seq, next_cht)
next_bool = !any(duplicated(base::strsplit(chr_seq,"")[[1]]))
if(j>=nchar(tmp)) break
return(j)
}
}
marker(4)
n
chr_seq = substr(tmp, 1, n)
chr_seq
chr_seq = substr(tmp, 1, (n-1))
next_bool = TRUE
j <- n
next_bool
cat(j, "\n")
next_cht = substr(tmp, j, j)
next_cht
j <- j + 1
paste0(chr_seq, next_cht)
chr_seq = paste0(chr_seq, next_cht)
!any(duplicated(base::strsplit(chr_seq,"")[[1]]))
any(duplicated(base::strsplit(chr_seq,"")[[1]]))
next_bool = any(duplicated(base::strsplit(chr_seq,"")[[1]]))
next_bool
if(j>=nchar(tmp)) break
while (next_bool) {
cat(j, "\n")
next_cht = substr(tmp, j, j)
j <- j + 1
chr_seq = paste0(chr_seq, next_cht)
next_bool = any(duplicated(base::strsplit(chr_seq,"")[[1]]))
if(j>=nchar(tmp)) break
return(j)
}
marker <- function(n){
chr_seq = substr(tmp, 1, (n-1))
next_bool = TRUE
j <- n
while (next_bool) {
cat(j, "\n")
next_cht = substr(tmp, j, j)
j <- j + 1
chr_seq = paste0(chr_seq, next_cht)
next_bool = any(duplicated(base::strsplit(chr_seq,"")[[1]]))
if(j>=nchar(tmp)) break
}
return(j)
}
marker(4)
marker(1)
marker(2)
marker(3)
marker(4)
tmp
substr(tmp, 1, (n-1))
duplicated(base::strsplit(chr_seq,"")[[1]])
chr_seq
listfruit
sub('.', '', listfruit)
sub('.', '', chr_seq)
chr_seq
marker <- function(n){
chr_seq = substr(tmp, 1, (n-1))
next_bool = TRUE
j <- n
while (next_bool) {
cat(j, "\n")
next_cht = substr(tmp, j, j)
j <- j + 1
chr_seq = paste0(chr_seq, next_cht)
next_bool = any(duplicated(base::strsplit(chr_seq,"")[[1]]))
chr_seq = sub('.', '', chr_seq)
if(j>=nchar(tmp)) break
}
return(j)
}
marker(4)
marker <- function(n){
chr_seq = substr(tmp, 1, (n-1))
next_bool = TRUE
j <- n
while (next_bool) {
next_cht = substr(tmp, j, j)
j <- j + 1
chr_seq = paste0(chr_seq, next_cht)
next_bool = any(duplicated(base::strsplit(chr_seq,"")[[1]]))
chr_seq = sub('.', '', chr_seq)
if(j>=nchar(tmp)) break
}
return(j)
}
marker(4)
marker <- function(n){
chr_seq = substr(tmp, 1, (n-1))
next_bool = TRUE
j <- n
while (next_bool) {
next_cht = substr(tmp, j, j)
j <- j + 1
chr_seq = paste0(chr_seq, next_cht)
next_bool = any(duplicated(base::strsplit(chr_seq,"")[[1]]))
chr_seq = sub('.', '', chr_seq)
if(j>=nchar(tmp)) break
}
return(j)
}
marker(4)
marker <- function(n){
chr_seq = substr(tmp, 1, (n-1))
next_bool = TRUE
j <- (n-1)
while (next_bool) {
j <- j + 1
next_cht = substr(tmp, j, j)
chr_seq = paste0(chr_seq, next_cht)
next_bool = any(duplicated(base::strsplit(chr_seq,"")[[1]]))
chr_seq = sub('.', '', chr_seq)
if(j>=nchar(tmp)) break
}
return(j)
}
marker(4)
marker(14)
list('sol1' = marker(4),
'sol2'= marker(14))
#!/usr/bin/env Rscript
# path to wd
path.wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(path.wd)
tmp <- read.table(file = "Data/input.txt")$V1
marker <- function(n){
chr_seq = substr(tmp, 1, (n-1))
next_bool = TRUE
j <- (n-1)
while (next_bool) {
j <- j + 1
next_cht = substr(tmp, j, j)
chr_seq = paste0(chr_seq, next_cht)
next_bool = any(duplicated(base::strsplit(chr_seq,"")[[1]]))
chr_seq = sub('.', '', chr_seq)
if(j>=nchar(tmp)) break
}
return(j)
}
list('sol1' = marker(4),
'sol2'= marker(14))
base::strsplit(chr_seq,"")[[1]]
